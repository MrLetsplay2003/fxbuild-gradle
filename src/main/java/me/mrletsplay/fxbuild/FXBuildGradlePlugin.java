/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.mrletsplay.fxbuild;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.stream.Collectors;

import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.artifacts.Dependency;
import org.gradle.api.plugins.JavaApplication;
import org.gradle.api.tasks.compile.JavaCompile;

import me.mrletsplay.fxloader.launcher.FXLoaderLauncher;
import me.mrletsplay.mrcore.http.HttpRequest;

public class FXBuildGradlePlugin implements Plugin<Project> {

	private static final String FXLOADER_URL = "https://maven.graphite-official.com/releases/me/mrletsplay/FXLoader/%s/FXLoader-%s.jar";

	@Override
	public void apply(Project project) {
		project.getTasks().register("addFXClasses", task -> {
			task.doFirst(t -> {
				File libDirectory = new File("lib");

				JavaCompile compile = (JavaCompile) project.getTasks().named("compileJava").get();
				Path classDir = compile.getDestinationDirectory().get().getAsFile().toPath();

				File tempFile = new File(t.getTemporaryDir(), "fxloader.jar");
				if(!tempFile.exists()) {
					try {
						String ver = FXBuildMetadata.FXLOADER_VERSION;
						HttpRequest.createGet(String.format(FXLOADER_URL, ver, ver)).execute().transferTo(tempFile);
					} catch (IOException e1) {
						throw new RuntimeException(e1);
					}
				}

				try(FileSystem fs = FileSystems.newFileSystem(tempFile.toPath(), (ClassLoader) null)) {
					Path copyFiles = fs.getPath("/me/mrletsplay/fxloader/");
					Files.walk(copyFiles).forEach(fl -> {
						if(Files.isDirectory(fl)) return;
						project.getLogger().info("Copying " + fl);
						Path dest = Paths.get(classDir.toString(), fl.toString());
						try {
							Files.createDirectories(dest.getParent());
							Files.copy(fl, dest, StandardCopyOption.REPLACE_EXISTING);
						} catch (IOException e) {
							throw new RuntimeException("Failed to copy file", e);
						}
					});
				}catch(IOException e) {
					throw new RuntimeException(e);
				}

				List<Dependency> deps = task.getProject().getConfigurations().getAt("compileOnly").getDependencies()
					.stream()
					.filter(d -> d.getGroup().equals("org.openjfx"))
					.collect(Collectors.toList());

				if(deps.isEmpty()) {
					project.getLogger().warn("No OpenJFX dependencies with scope 'provided' found. Not doing anything");
					return;
				}

				String oldMainClass = null;

				JavaApplication application = (JavaApplication) project.getExtensions().getByName("application");
				oldMainClass = application.getMainClass().getOrElse((String) project.property("mainClassName"));

				System.out.println("Old main class: " + oldMainClass);

				application.getMainClass().set(FXLoaderLauncher.class.getName());
				project.setProperty("mainClassName", FXLoaderLauncher.class.getName());

				String meta = String.format("%s\n%s\n%s",
					oldMainClass,
					deps.stream()
						.map(d -> d.getName() + ":" + d.getVersion())
						.collect(Collectors.joining(";")),
					libDirectory);

				Path metaPath = Paths.get(classDir.toString(), "META-INF/fxbuild/meta.txt");
				try {
					Files.createDirectories(metaPath.getParent());
					Files.write(metaPath, meta.getBytes(StandardCharsets.UTF_8));
				} catch (IOException e) {
					throw new RuntimeException(e);
				}
			});
		});

		project.getTasks().named("classes").get().dependsOn("addFXClasses");
	}
}
